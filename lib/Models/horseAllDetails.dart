///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class HorseAllDetailsDataProfileToFollow {

  int? toFollowUid;
  String? toFollowDesc;
  String? toFollowCode;
  bool? hitFlag;

  HorseAllDetailsDataProfileToFollow({
    this.toFollowUid,
    this.toFollowDesc,
    this.toFollowCode,
    this.hitFlag,
  });
  HorseAllDetailsDataProfileToFollow.fromJson(Map<String, dynamic> json) {
    toFollowUid = int.tryParse(json["to_follow_uid"]?.toString() ?? '');
    toFollowDesc = json["to_follow_desc"]?.toString();
    toFollowCode = json["to_follow_code"]?.toString();
    hitFlag = json["hit_flag"];
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["to_follow_uid"] = toFollowUid;
    data["to_follow_desc"] = toFollowDesc;
    data["to_follow_code"] = toFollowCode;
    data["hit_flag"] = hitFlag;
    return data;
  }
}

class HorseAllDetailsDataProfileTrainerLast_14Days {
/*
{
  "runs": 45,
  "wins": 13,
  "percent": 29
} 
*/

  int? runs;
  int? wins;
  int? percent;

  HorseAllDetailsDataProfileTrainerLast_14Days({
    this.runs,
    this.wins,
    this.percent,
  });
  HorseAllDetailsDataProfileTrainerLast_14Days.fromJson(
      Map<String, dynamic> json) {
    runs = int.tryParse(json["runs"]?.toString() ?? '');
    wins = int.tryParse(json["wins"]?.toString() ?? '');
    percent = int.tryParse(json["percent"]?.toString() ?? '');
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["runs"] = runs;
    data["wins"] = wins;
    data["percent"] = percent;
    return data;
  }
}

class HorseAllDetailsDataProfileTips {
/*
{
  "race_instance_uid": 788192,
  "newspaper_uid": 12,
  "naps_style": "Robin Goodfellow"
} 
*/

  int? raceInstanceUid;
  int? newspaperUid;
  String? napsStyle;

  HorseAllDetailsDataProfileTips({
    this.raceInstanceUid,
    this.newspaperUid,
    this.napsStyle,
  });
  HorseAllDetailsDataProfileTips.fromJson(Map<String, dynamic> json) {
    raceInstanceUid = int.tryParse(json["race_instance_uid"]?.toString() ?? '');
    newspaperUid = int.tryParse(json["newspaper_uid"]?.toString() ?? '');
    napsStyle = json["naps_style"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["race_instance_uid"] = raceInstanceUid;
    data["newspaper_uid"] = newspaperUid;
    data["naps_style"] = napsStyle;
    return data;
  }
}

class HorseAllDetailsDataProfile {
  int? horseUid;
  String? horseName;
  String? horseCountryOriginCode;
  String? horseDateOfBirth;
  String? horseDateOfDeath;
  String? age;
  String? dateGelded;
  int? sireUid;
  int? damUid;
  String? sireHorseName;
  String? sireCountryOriginCode;
  String? damHorseName;
  String? damCountryOriginCode;
  String? damSireHorseName;
  String? damSireCountryOriginCode;
  int? siresSireUid;
  String? siresSireName;
  String? ownerName;
  int? ownerUid;
  String? ownerPtpTypeCode;
  String? trainerName;
  int? trainerUid;
  String? trainerLocation;
  String? trainerPtpTypeCode;
  String? breederName;
  String? horseColourCode;
  String? horseSexCode;
  String? silkImagePath;
  List<HorseAllDetailsDataProfileTips?>? tips;
  String? comments;
  HorseAllDetailsDataProfileTrainerLast_14Days? trainerLast_14Days;
  String? previousTrainers;
  String? previousOwners;
  int? damSireUid;
  bool? damStatus;
  bool? sireStatus;
  String? horseSex;
  String? horseColour;
  String? sireComment;
  String? avgFlatWinDist;
  double? sireAvgFlatWinDist;
  double? damSireAvgFlatWinDist;
  String? avgWinDistance;
  double? sireAvgWinDistance;
  double? damSireAvgWinDistance;
  String? avgEarningsIndex;
  String? studFee;
  String? weatherbysUid;
  List<HorseAllDetailsDataProfileToFollow?>? toFollow;
  int? ownerGroupUid;

  HorseAllDetailsDataProfile({
    this.horseUid,
    this.horseName,
    this.horseCountryOriginCode,
    this.horseDateOfBirth,
    this.horseDateOfDeath,
    this.age,
    this.dateGelded,
    this.sireUid,
    this.damUid,
    this.sireHorseName,
    this.sireCountryOriginCode,
    this.damHorseName,
    this.damCountryOriginCode,
    this.damSireHorseName,
    this.damSireCountryOriginCode,
    this.siresSireUid,
    this.siresSireName,
    this.ownerName,
    this.ownerUid,
    this.ownerPtpTypeCode,
    this.trainerName,
    this.trainerUid,
    this.trainerLocation,
    this.trainerPtpTypeCode,
    this.breederName,
    this.horseColourCode,
    this.horseSexCode,
    this.silkImagePath,
    this.tips,
    this.comments,
    this.trainerLast_14Days,
    this.previousTrainers,
    this.previousOwners,
    this.damSireUid,
    this.damStatus,
    this.sireStatus,
    this.horseSex,
    this.horseColour,
    this.sireComment,
    this.avgFlatWinDist,
    this.sireAvgFlatWinDist,
    this.damSireAvgFlatWinDist,
    this.avgWinDistance,
    this.sireAvgWinDistance,
    this.damSireAvgWinDistance,
    this.avgEarningsIndex,
    this.studFee,
    this.weatherbysUid,
    this.toFollow,
    this.ownerGroupUid,
  });
  HorseAllDetailsDataProfile.fromJson(Map<String, dynamic> json) {
    horseUid = int.tryParse(json["horse_uid"]?.toString() ?? '');
    horseName = json["horse_name"]?.toString();
    horseCountryOriginCode = json["horse_country_origin_code"]?.toString();
    horseDateOfBirth = json["horse_date_of_birth"]?.toString();
    horseDateOfDeath = json["horse_date_of_death"]?.toString();
    age = json["age"]?.toString();
    dateGelded = json["date_gelded"]?.toString();
    sireUid = int.tryParse(json["sire_uid"]?.toString() ?? '');
    damUid = int.tryParse(json["dam_uid"]?.toString() ?? '');
    sireHorseName = json["sire_horse_name"]?.toString();
    sireCountryOriginCode = json["sire_country_origin_code"]?.toString();
    damHorseName = json["dam_horse_name"]?.toString();
    damCountryOriginCode = json["dam_country_origin_code"]?.toString();
    damSireHorseName = json["dam_sire_horse_name"]?.toString();
    damSireCountryOriginCode = json["dam_sire_country_origin_code"]?.toString();
    siresSireUid = int.tryParse(json["sires_sire_uid"]?.toString() ?? '');
    siresSireName = json["sires_sire_name"]?.toString();
    ownerName = json["owner_name"]?.toString();
    ownerUid = int.tryParse(json["owner_uid"]?.toString() ?? '');
    ownerPtpTypeCode = json["owner_ptp_type_code"]?.toString();
    trainerName = json["trainer_name"]?.toString();
    trainerUid = int.tryParse(json["trainer_uid"]?.toString() ?? '');
    trainerLocation = json["trainer_location"]?.toString();
    trainerPtpTypeCode = json["trainer_ptp_type_code"]?.toString();
    breederName = json["breeder_name"]?.toString();
    horseColourCode = json["horse_colour_code"]?.toString();
    horseSexCode = json["horse_sex_code"]?.toString();
    silkImagePath = json["silk_image_path"]?.toString();
    if (json["tips"] != null && (json["tips"] is List)) {
      final v = json["tips"];
      final arr0 = <HorseAllDetailsDataProfileTips>[];
      v.forEach((v) {
        arr0.add(HorseAllDetailsDataProfileTips.fromJson(v));
      });
      tips = arr0;
    }
    comments = json["comments"]?.toString();
    trainerLast_14Days = (json["trainer_last_14_days"] != null &&
            (json["trainer_last_14_days"] is Map))
        ? HorseAllDetailsDataProfileTrainerLast_14Days.fromJson(
            json["trainer_last_14_days"])
        : null;
    previousTrainers = json["previous_trainers"]?.toString();
    previousOwners = json["previous_owners"]?.toString();
    damSireUid = int.tryParse(json["dam_sire_uid"]?.toString() ?? '');
    damStatus = json["dam_status"];
    sireStatus = json["sire_status"];
    horseSex = json["horse_sex"]?.toString();
    horseColour = json["horse_colour"]?.toString();
    sireComment = json["sire_comment"]?.toString();
    avgFlatWinDist = json["avg_flat_win_dist"]?.toString();
    sireAvgFlatWinDist =
        double.tryParse(json["sire_avg_flat_win_dist"]?.toString() ?? '');
    damSireAvgFlatWinDist =
        double.tryParse(json["dam_sire_avg_flat_win_dist"]?.toString() ?? '');
    avgWinDistance = json["avg_win_distance"]?.toString();
    sireAvgWinDistance =
        double.tryParse(json["sire_avg_win_distance"]?.toString() ?? '');
    damSireAvgWinDistance =
        double.tryParse(json["dam_sire_avg_win_distance"]?.toString() ?? '');
    avgEarningsIndex = json["avg_earnings_index"]?.toString();
    studFee = json["stud_fee"]?.toString();
    weatherbysUid = json["weatherbys_uid"]?.toString();
    if (json["to_follow"] != null && (json["to_follow"] is List)) {
      final v = json["to_follow"];
      final arr0 = <HorseAllDetailsDataProfileToFollow>[];
      v.forEach((v) {
        arr0.add(HorseAllDetailsDataProfileToFollow.fromJson(v));
      });
      toFollow = arr0;
    }
    ownerGroupUid = int.tryParse(json["owner_group_uid"]?.toString() ?? '');
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    data["horse_uid"] = horseUid;
    data["horse_name"] = horseName;
    data["horse_country_origin_code"] = horseCountryOriginCode;
    data["horse_date_of_birth"] = horseDateOfBirth;
    data["horse_date_of_death"] = horseDateOfDeath;
    data["age"] = age;
    data["date_gelded"] = dateGelded;
    data["sire_uid"] = sireUid;
    data["dam_uid"] = damUid;
    data["sire_horse_name"] = sireHorseName;
    data["sire_country_origin_code"] = sireCountryOriginCode;
    data["dam_horse_name"] = damHorseName;
    data["dam_country_origin_code"] = damCountryOriginCode;
    data["dam_sire_horse_name"] = damSireHorseName;
    data["dam_sire_country_origin_code"] = damSireCountryOriginCode;
    data["sires_sire_uid"] = siresSireUid;
    data["sires_sire_name"] = siresSireName;
    data["owner_name"] = ownerName;
    data["owner_uid"] = ownerUid;
    data["owner_ptp_type_code"] = ownerPtpTypeCode;
    data["trainer_name"] = trainerName;
    data["trainer_uid"] = trainerUid;
    data["trainer_location"] = trainerLocation;
    data["trainer_ptp_type_code"] = trainerPtpTypeCode;
    data["breeder_name"] = breederName;
    data["horse_colour_code"] = horseColourCode;
    data["horse_sex_code"] = horseSexCode;
    data["silk_image_path"] = silkImagePath;
    if (tips != null) {
      final v = tips;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["tips"] = arr0;
    }
    data["comments"] = comments;
    if (trainerLast_14Days != null) {
      data["trainer_last_14_days"] = trainerLast_14Days!.toJson();
    }
    data["previous_trainers"] = previousTrainers;
    data["previous_owners"] = previousOwners;
    data["dam_sire_uid"] = damSireUid;
    data["dam_status"] = damStatus;
    data["sire_status"] = sireStatus;
    data["horse_sex"] = horseSex;
    data["horse_colour"] = horseColour;
    data["sire_comment"] = sireComment;
    data["avg_flat_win_dist"] = avgFlatWinDist;
    data["sire_avg_flat_win_dist"] = sireAvgFlatWinDist;
    data["dam_sire_avg_flat_win_dist"] = damSireAvgFlatWinDist;
    data["avg_win_distance"] = avgWinDistance;
    data["sire_avg_win_distance"] = sireAvgWinDistance;
    data["dam_sire_avg_win_distance"] = damSireAvgWinDistance;
    data["avg_earnings_index"] = avgEarningsIndex;
    data["stud_fee"] = studFee;
    data["weatherbys_uid"] = weatherbysUid;
    if (toFollow != null) {
      final v = toFollow;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data["to_follow"] = arr0;
    }
    data["owner_group_uid"] = ownerGroupUid;
    return data;
  }
}

class HorseAllDetailsData {
/*
{
  "profile": {
    "horse_uid": 3671729,
    "horse_name": "Khanjar",
    "horse_country_origin_code": "IRE",
    "horse_date_of_birth": "2019-02-23T00:00:00+00:00",
    "horse_date_of_death": null,
    "age": "2-y-o",
    "date_gelded": null,
    "sire_uid": 582877,
    "dam_uid": 1014599,
    "sire_horse_name": "Kodiac",
    "sire_country_origin_code": "GB",
    "dam_horse_name": "Naafer",
    "dam_country_origin_code": "GB",
    "dam_sire_horse_name": "Oasis Dream",
    "dam_sire_country_origin_code": "GB",
    "sires_sire_uid": 42373,
    "sires_sire_name": "Danehill",
    "owner_name": "Shadwell Estate Company Ltd",
    "owner_uid": 302438,
    "owner_ptp_type_code": "N",
    "trainer_name": "William Haggas",
    "trainer_uid": 3415,
    "trainer_location": "Newmarket, Suffolk",
    "trainer_ptp_type_code": "N",
    "breeder_name": "Shadwell Estate Company Limited",
    "horse_colour_code": "B",
    "horse_sex_code": "C",
    "silk_image_path": "8/3/4/302438",
    "tips": [
      {
        "race_instance_uid": 788192,
        "newspaper_uid": 12,
        "naps_style": "Robin Goodfellow"
      }
    ],
    "comments": null,
    "trainer_last_14_days": {
      "runs": 45,
      "wins": 13,
      "percent": 29
    },
    "previous_trainers": null,
    "previous_owners": null,
    "dam_sire_uid": 565797,
    "dam_status": false,
    "sire_status": false,
    "horse_sex": "colt",
    "horse_colour": "b",
    "sire_comment": null,
    "avg_flat_win_dist": null,
    "sire_avg_flat_win_dist": 7.1,
    "dam_sire_avg_flat_win_dist": 7.6,
    "avg_win_distance": null,
    "sire_avg_win_distance": 7.111147186147186,
    "dam_sire_avg_win_distance": 7.6041911587084305,
    "avg_earnings_index": null,
    "stud_fee": null,
    "weatherbys_uid": null,
    "to_follow": [
      {
        "to_follow_uid": 54,
        "to_follow_desc": "Rabbah 21",
        "to_follow_code": "}",
        "hit_flag": false
      }
    ],
    "owner_group_uid": 100
  },
  "entries": null,
  "quotes": null,
  "stable_tour_quotes": null
} 
*/

  HorseAllDetailsDataProfile? profile;
  String? entries;
  String? quotes;
  String? stableTourQuotes;

  HorseAllDetailsData({
    this.profile,
    this.entries,
    this.quotes,
    this.stableTourQuotes,
  });
  HorseAllDetailsData.fromJson(Map<String, dynamic> json) {
    profile = (json["profile"] != null && (json["profile"] is Map))
        ? HorseAllDetailsDataProfile.fromJson(json["profile"])
        : null;
    entries = json["entries"]?.toString();
    quotes = json["quotes"]?.toString();
    stableTourQuotes = json["stable_tour_quotes"]?.toString();
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (profile != null) {
      data["profile"] = profile!.toJson();
    }
    data["entries"] = entries;
    data["quotes"] = quotes;
    data["stable_tour_quotes"] = stableTourQuotes;
    return data;
  }
}

class HorseAllDetails {
/*
{
  "data": {
    "profile": {
      "horse_uid": 3671729,
      "horse_name": "Khanjar",
      "horse_country_origin_code": "IRE",
      "horse_date_of_birth": "2019-02-23T00:00:00+00:00",
      "horse_date_of_death": null,
      "age": "2-y-o",
      "date_gelded": null,
      "sire_uid": 582877,
      "dam_uid": 1014599,
      "sire_horse_name": "Kodiac",
      "sire_country_origin_code": "GB",
      "dam_horse_name": "Naafer",
      "dam_country_origin_code": "GB",
      "dam_sire_horse_name": "Oasis Dream",
      "dam_sire_country_origin_code": "GB",
      "sires_sire_uid": 42373,
      "sires_sire_name": "Danehill",
      "owner_name": "Shadwell Estate Company Ltd",
      "owner_uid": 302438,
      "owner_ptp_type_code": "N",
      "trainer_name": "William Haggas",
      "trainer_uid": 3415,
      "trainer_location": "Newmarket, Suffolk",
      "trainer_ptp_type_code": "N",
      "breeder_name": "Shadwell Estate Company Limited",
      "horse_colour_code": "B",
      "horse_sex_code": "C",
      "silk_image_path": "8/3/4/302438",
      "tips": [
        {
          "race_instance_uid": 788192,
          "newspaper_uid": 12,
          "naps_style": "Robin Goodfellow"
        }
      ],
      "comments": null,
      "trainer_last_14_days": {
        "runs": 45,
        "wins": 13,
        "percent": 29
      },
      "previous_trainers": null,
      "previous_owners": null,
      "dam_sire_uid": 565797,
      "dam_status": false,
      "sire_status": false,
      "horse_sex": "colt",
      "horse_colour": "b",
      "sire_comment": null,
      "avg_flat_win_dist": null,
      "sire_avg_flat_win_dist": 7.1,
      "dam_sire_avg_flat_win_dist": 7.6,
      "avg_win_distance": null,
      "sire_avg_win_distance": 7.111147186147186,
      "dam_sire_avg_win_distance": 7.6041911587084305,
      "avg_earnings_index": null,
      "stud_fee": null,
      "weatherbys_uid": null,
      "to_follow": [
        {
          "to_follow_uid": 54,
          "to_follow_desc": "Rabbah 21",
          "to_follow_code": "}",
          "hit_flag": false
        }
      ],
      "owner_group_uid": 100
    },
    "entries": null,
    "quotes": null,
    "stable_tour_quotes": null
  },
  "status": 200
} 
*/

  HorseAllDetailsData? data;
  int? status;

  HorseAllDetails({
    this.data,
    this.status,
  });
  HorseAllDetails.fromJson(Map<String, dynamic> json) {
    data = (json["data"] != null && (json["data"] is Map))
        ? HorseAllDetailsData.fromJson(json["data"])
        : null;
    status = int.tryParse(json["status"]?.toString() ?? '');
  }
  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = Map<String, dynamic>();
    if (data != null) {
      data["data"] = this.data!.toJson();
    }
    data["status"] = status;
    return data;
  }
}
